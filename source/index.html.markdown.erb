---
title: Steno Bricks
---

## What's this?

**StenoBricks** is a project by [Drew Neil][] that aims to visualize how Plover Steno theory works.
If you're interested in learning more about Plover, the best place to start is by reading [Learn Plover][] by Zack Brown.
The rest of this article assumes that you are familiar with Plover Steno theory.

**StenoBricks** is currently a proof of concept and the site may be considered *in beta* status.
That means that things may move around and URLs may change.
You have been warned.

You can find the [source code for StenoBricks on github][source].

[Drew Neil]: http://drewneil.com/
[Learn Plover]: https://sites.google.com/site/ploverdoc/home
[source]: https://github.com/nelstrom/StenoBricks

### What's a Steno Brick?

A Steno Brick is one or more keystrokes that stand for a sound.
For example, `K` is a brick that stands for the 'K' sound.
`W` is a brick that stands for the 'W' sound.
Together, `KW` forms a brick that stands for the 'QU' sound.

Some keystrokes on the steno keyboard can produce more than one brick.
For example, `-F` may produce the 'F' sound, the 'V' sound, or the 'S' sound, meaning that 3 separate bricks all correspond to the same keystroke.
Similarly, `-FRPB` may produce the 'NCH' sound or the 'RCH' sound, so that cluster of keystrokes can produce two different bricks.

You can [browse our collection of bricks][bricks]. For each brick, we illustrate how it looks on a StenoBrick diagram and list some example definitions that use the brick.

### What's a Definition?

A Definition translates steno keystrokes (input), into words, phrases, punctuation, and commands (output).
Plover Steno theory is made up out of thousands of definitions, which are collected together to form [a dictionary in JSON format][dictionary].

You can also [browse our collection of definitions][definitions].
For each definition, we illustrate how it looks on a StenoBrick diagram and list each of the bricks used to form that definition.

*Synonyms* are definitions that use different strokes to produce the same output.
Where appropriate, we list any synonyms for a definition.
For example, see [the definition for `APBD`][and], which lists `SKP` and `STK` as synonyms.

*Homographs* are words that sound alike, such as "there", "their", and "they're".
Where appropriate, we list any homographs for a definition.
For example, see [the definition for `THAEUR`][their].


[bricks]: <%= "#{rootpath}/bricks" %>
[definitions]: <%= "#{rootpath}/definitions" %>
[and]: <%= "#{rootpath}/definitions/apbd/" %>
[their]: <%= "#{rootpath}/definitions/thaeur/" %>
[dictionary]: https://raw.githubusercontent.com/openstenoproject/plover/master/plover/assets/main.json

### How to read StenoBricks diagrams

A StenoBricks diagram is made up of two parts: the lower section represents the Steno keyboard, while the upper section represents the strokes that form a definition.

#### Keyboard diagram

The lower section looks like this:

<img src="<%= path_to_svg('diagram') %>"/>

The keyboard graphic used in these diagrams is based on the physical form of a Steno keyboard with some adjustments.
The keys are shaded dark or light in alternation (a bit like a piano keyboard).
Each key is labelled with a letter above, following Steno Order.
(Two special keys are labelled with a symbol instead: `#` being the *number key*, and `*` being the *star key*. These special keys don't follow the same rules as the others, so we'll discuss them later.)

The diagram is divided into columns, with the background color alternating between white and shaded.
Each column corresponds to one finger or thumb.
The columns representing pinky, middle finger and thumb are shaded for both left and right hands.

<table>
<tr>
<th>Digit</th>
<th>Keys</th>
</tr>
<tr>
<td>Left Pinky</td>
<td><code>S</code></td>
</tr>
<tr>
<td>Left Ring</td>
<td><code>T</code> + <code>K</code></td>
</tr>
<tr>
<td>Left Middle</td>
<td><code>P</code> + <code>W</code></td>
</tr>
<tr>
<td>Left Index</td>
<td><code>H</code> + <code>R</code></td>
</tr>
<tr>
<td>Left Thumb</td>
<td><code>A</code> + <code>O</code></td>
</tr>
<tr>
<td>Left/Right Index</td>
<td><code>&#42;</code></td>
</tr>
<tr>
<td>Right Thumb</td>
<td><code>E</code> + <code>U</code></td>
</tr>
<tr>
<td>Right Index</td>
<td><code>F</code> + <code>R</code></td>
</tr>
<tr>
<td>Right Middle</td>
<td><code>P</code> + <code>B</code></td>
</tr>
<tr>
<td>Right Ring</td>
<td><code>L</code> + <code>G</code></td>
</tr>
<tr>
<td>Right Pinky</td>
<td><code>T</code> + <code>S</code></td>
</tr>
<tr>
<td>Right Second Pinky</td>
<td><code>D</code> + <code>Z</code></td>
</tr>
</table>

If your right hand has only one pinky, then you'll just have to use it to stretch for the `D` and `Z` keys.

##### Star key

TODO

##### Number key

TODO

#### Strokes diagram

In each of the following diagrams, the bottom half shows the keyboard, while the top half shows the strokes that form a definition.

Here's a definition for the word 'hug':

<img src="<%= path_to_svg('hug', 'definitions') %>"/>

The 'H' brick is a single keystroke by the left index finger.
The 'U' brick is a single keystroke by the right thumb.
The 'G' brick is a single keystroke by the right ring finger.
This example is straightforward enough: each brick corresponds to one letter of the word 'hug'.

The graphic representing a brick consists of two parts: the label and one or more matchers.
The label is the large white rounded rectangle shape.
The matchers are the light or dark arches underneath the label.
These matchers always align with the keys on the keyboard that need to be pressed in order to produce a given brick.
The 'H' brick has a single black matcher, which lines up with the `H` key.
The 'G' brick has a single white matcher, which lines up with the `G` key.
Black matchers correspond to the top row of keys for the fingers, while white matchers correspond to the bottom row of keys.

Here's a definition for the word 'big':

<img src="<%= path_to_svg('pweug', 'definitions') %>"/>

Once again, this three letter word is composed from three bricks, but this time it requires five simultaneous keystrokes.
The 'B' brick is formed by pressing both the `P` and `W` keys with the left middle finger.
The 'I' brick is formed by pressing both the `E` and `U` keys with the right thumb.
As before, the 'G' brick is a single keystroke by the right ring finger.

As you see, some bricks are formed from a chord of several keystrokes, while other bricks are made from just a single keystroke.
The bricks formed from a single keystroke tend to be more common, while the bricks formed from longer chords occur less frequently.

Here's a definition for the word 'finch':

<img src="<%= path_to_svg('tpeufrpb', 'definitions') %>"/>

The 'F' brick is formed by the left hand pressing the `T` key with the ring finger and the `P` key with the middle finger.
Notice how this brick spans two columns, which indicates that two adjacent fingers take part in producing this brick.
By contrast, the 'I' brick also requires two keystrokes, but it's contained within a single column so it can be produced by a single finger.

The 'NCH' brick is formed by pressing four keys simultaneously: `F` and `R` with the right index finger, as well as `P` and `B` with the right middle finger.

All of the definitions that we've looked at so far were made up of three bricks.
It doesn't have to be that way.
A definition can be made up of as many bricks as you like.
For example, this definition for the word 'scribble' is made from six bricks:

<img src="<%= path_to_svg('skreubl', 'definitions') %>"/>

A definition can also be made up of more than one stroke. For example, this definition for the word 'present' consists of two separate strokes:

<img src="<%= path_to_svg('pres/epbt', 'definitions') %>"/>

The first stroke outlines the first half of the word ('pres'), and the second stroke completes it ('ent').
